var taptest = require('tap').test;
var sshconf = require('../index');

sshconf.path(__dirname + '/fixtures/config');

var test = [

  function() {

    taptest('read the hosts file and get all the hosts as an object', function (t) {

      t.plan(2);

      sshconf.read(function(err, hosts) {

        var h = Object.keys(hosts).length;

        t.equal(h, 3);
        t.ok(hosts, 'its an object');
        test[1]();
      });

    });
  },
  function() {

    taptest('get a named host', function(t) {
   
      t.plan(1);

      sshconf.read(function(err, hosts) {
        t.equal(2, sshconf.value('foo').patterns.length);
        test[2]();
      });

    });
  },
  function() {

    taptest('get a property from a named host', function(t) {
      
      t.plan(1);

      sshconf.read(function(err, hosts) {
        t.equal(sshconf.value('foo', 'IdentityFile'), '~/.ssh/foo_rsa');
        test[3]();
      });

    });
  },
  function() {

    taptest('write a property to a named host', function(t) {

      t.plan(2);

      sshconf.read(function(err, hosts) {
        sshconf.value('foo', 'IdentityFile', '~/.ssh/bla_rsa');
        sshconf.write(function(err) {
          if (err) {
            t.fail(err);
          }
          else {
            sshconf.read(function(err, hosts) {
               t.equal(sshconf.value('foo', 'IdentityFile'), '~/.ssh/bla_rsa');
               t.ok(true, 'file was written');
               test[4]();
            });
          }

        });
      });

    });

  },
  function() {

    taptest('write a property to a named host a second time', function(t) {

      t.plan(2);

      sshconf.read(function(err, hosts) {
        sshconf.value('foo', 'IdentityFile', '~/.ssh/foo_rsa');
        sshconf.write(function(err) {
          if (err) {
            t.fail(err);
          }
          else {
            sshconf.read(function(err, hosts) {
               t.equal(sshconf.value('foo', 'IdentityFile'), '~/.ssh/foo_rsa');
               t.ok(true, 'file was written');
               test[5]();
            });
          }

        });
      });
    });
  },
  function() {
    console.log('done');
  }

];

test[0]();

