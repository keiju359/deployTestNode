{
  "name": "d",
  "description": "A generic deployment tool for nodejs",
  "author": {
    "name": "Paolo Fragomeni",
    "email": "paolo@nodejitsu.com"
  },
  "version": "0.0.6",
  "contributors": [
    {
      "name": "Paolo Fragomeni",
      "email": "paolo@nodejitsu.com"
    }
  ],
  "keywords": [
    "cli",
    "nodejitsu",
    "cloud hosting",
    "platform-as-a-service",
    "deployment"
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/hij1nx/d.git"
  },
  "dependencies": {
    "optimist": "*",
    "sshconf": "0.x.x",
    "semver": "1.0.x",
    "colors": "*"
  },
  "bin": {
    "d": "./bin/d"
  },
  "main": "./lib/index",
  "engines": {
    "node": ">= 0.9.0"
  },
  "readme": "# Synopsis\nA generic deploy tool for #node.js\n\n# Motivation\n - A platform as a service must distribute the concerns of connectivity. A deployment tool should cycle \nthrough a cache of connection options N times in case of failure. \n - A deployment tool should communicate with a deployment proxy, not a core API. The deploy proxy should \ndistribute the code it receives to the appropriate target machines.\n - Deployments should be transactional, meaning that if any one step during the process fails, nothing is\naffected on the target machine.\n - With Node.js you're taking `libuv` as a dependency, `git` isn't any more significant.\n\n# Features\n - Uses git to manage deployment versioning\n - Binary differential deployments (only deploy your changes)\n - An interactive REPL mode\n - API endpoint agnostic\n - Uses directory context (similar to npm)\n - Extremely readable plugin architecture\n\n# Usage\n\n## Interactive mode (REPL)\n__**Commands**__ `d`\n\n__**Description**__ Running this program without any parameters will cause it to go into interactive mode, a mode similar to the Node.js REPL. Because the program will remain running, it is possible to establish long lived connections to the deployment targets; this allows for interactive debugging.\n\n## Push code to the cloud\n__**Commands**__ `d push [remote]`, `push`\n\n__**Description**__ Attempt to push the code in the current project to the deployment target(s). You may optionally specify a remote for the code push.\n\n## Pull code from the cloud\n__**Commands**__ `d pull [sha1|tag]`, `pull [sha1|tag]`\n\n__**Description**__ Pull the latest code from for the app. If no version is specified it will pull the latest. If a version is specified, it can be either the sha1 hash for a particular commit or a git tag.\n\n## Stop, Restart or Start code\n__**Commands**__ `d start [version]`, `d stop [all]`, `d restart`\n\n__**Description**__ Send the application a start, stop or restart signal. These commands are short hand for `d sig start`, `d sig stop` and `d sig restart`. \n\n - To specify a version of your app to start, supply the git `sha1` hash or `tag`.\n\n - To stop all of the apps that you have deployed, specify `all` in addition to `stop`.\n\n## Send an arbitrary signal to the running code\n__**Commands**__ `d sig <signal>`, `sig <signal>`\n\n__**Description**__ Send an arbitrary signal to an application.\n\n## Get info for the deployed code\n__**Commands**__ `d info [name]`, `info [name]`\n\n__**Description**__ Get information such as the current status of the code, number of network resources it is using, uptime, etc.\n\n - To get the info for another project, specify the name of the project. For example: `d info hello-world`.\n\n## Catalog of all deployed code\n__**Commands**__ `d cat`, `cat`\n\n__**Description**__ Show a catalog of all of the applications that you have currently deployed.\n\n## Environment variables\n__**Commands**__ `d env [name] [value]`, `env [name] [value]`\n\n__**Description**__ Environment variables are settings that are applied to the shell environment when a deployment is made. This command will get, set, clear and delete environmental variables. \n\n - To get all of the variables, omit `name` and `value` and all of the currently set variables will be returned. If `--json` or `-j` is specified, all of the results will be returned as raw `JSON` format.\n\n - To set a variable, supply both the `name` and the `value`. If a value contains whitespace, remember to quote it.\n\n - To get a variable, supply only the `name` of the variable. This will print only the name and value of that variable.\n\n - To clear an environment variable for an app, supply only the `name` of the variable and specify `-c`. For example: `d env <name> -c`.\n\n - To delete environment variable for an app, supply only the `name` of the variable and specify `-d`. For example: `d env <name> -d`.\n\n## Logs\n\n__**Commands**__ `d logs`, `logs` \n\n__**Description**__ Application logging comes in two flavors. When running this program in interactive mode, you will have real-time logs over tcp. When this program is not running in interactive mode, you will see only a historic view. This historic view is updated when possible and does not represent the most current activity of the application.\n\n",
  "readmeFilename": "README.md",
  "_id": "d@0.0.6",
  "dist": {
    "shasum": "c106b903bd07aa0d9f56370b275f6a0ea6aa46a5"
  },
  "_from": "d@",
  "_resolved": "https://registry.npmjs.org/d/-/d-0.0.6.tgz"
}
