#!/usr/bin/env node

var lib = require('../lib');
var readline = require('readline');
var fs = require('fs');
var path = require('path');
var argv = require('optimist').argv;
var dpkg = require('../package.json');
var common = require('../lib/common');
var asni = require('ansi')(process.stdout);

var shortlist = lib.commands.shortlist;
var longlist = lib.commands.longlist;
var commands = lib.commands.raw;
var aliases = {};

var log = common.log;
var pkg;

log(0, dpkg.name + ' v' + dpkg.version);
log(0, 'node ' + process.version);

common.hasPackage();

//
// get the help information out of the commands and
// make it look nice and presentable for reading.
//
var namelength, namemargin = 0;

//
// this is not yet used, but it could be used if
// we want to control the width of the description.
//
var maxwidth = process.stdout.getWindowSize()[0];

for (var command in commands) {

  shortlist.push(command);

  var usage = commands[command].usage;
  var args = [], argdescriptions = [];

  var alias = commands[command].alias;

  if (alias) {

    for (var i = 0, l = alias.length; i < l; i++) {
      aliases[alias[i]] = commands[command];
    }
  }   

  for (var arg in usage) {
    args.push(arg);
    argdescriptions.push(arg + ' ' + usage[arg]);
  }

  //
  // an array of doctored strings use by the help
  // printer.
  //
  longlist[command] = [
    command,
    commands[command].description.join('\r\n'),
    args.join(' '),
    argdescriptions.join('\r\n  '),
    alias ? alias.join() : ''
  ];

  namelength = command.length;

  if (namelength > namemargin) {
    namemargin = namelength;
  }
}

for (var command in longlist) {

  namelength = command.length;

  var difference = namemargin - namelength;

  if (difference > 0) {
    for (var i = 0, d = difference; i < d; i++) {
      longlist[command][0] += ' ';
    }
  }
}

//
// if there are no arguments provided at the commandline
// we want to go into interactive mode.
//
var replHandler = function replHandler(config) {

  lib.mode = 'REPL';
  
  var shortlist = lib.commands.shortlist;

  function completer(line) {

    //
    // calculate the matches from the shortlist.
    //
    var hits = shortlist.filter(function(c) {
      return c.indexOf(line) === 0;
    });

    //
    // show all completions if none found
    //
    return [hits.length ? hits : shortlist, line]
  }

  var opts = {
    completer: completer,
    input: process.stdin,
    output: process.stdout
  };

  var rl = readline.createInterface(opts);

  rl.setPrompt('>');
  rl.prompt();

  rl.on('line', function(line) {

    var args = line.trim().split(' ');
    var name = args.splice(0, 1)[0];
    var container = commands[name] || aliases[name];

    if (name === 'exit' || name === 'quit' || name === 'q') {
      process.exit(0);
    }
    else if (container) {
      container.command.call(lib, args, config, function() {
        process.stdin.emit('keypress', '\r\n', { name: 'enter' }); 
      });
    }
    else {
      log(-1, 'Unknown command');
    }

    rl.prompt();

  }).on('close', function() {
    process.exit(0);
  });

};

var cliHandler = function cliHandler(config) {

  lib.mode = 'CLI';

  var name = argv._.splice(0, 1)[0]; // splice out the first item.

  if (argv.h) { // in the case of shorthand.

    name = 'help';
    argv._ = [argv.h];
  }

  var container = commands[name] || aliases[name];

  if (container) {

    //
    // pass in the arguments that the user wants to send to
    // the command as well as the configuration for this repo.
    //
    container.command.call(lib, argv._, config, function() {
      console.log('\r\n');
      process.stdin.emit('keypress', '\r\n', { name: 'enter' }); 
    });
  }
};

var handler = process.argv.length === 2 ? replHandler : cliHandler;

//
// ensure we have a git repository, if we don't, initalize one.
//
lib.git.startup(function(err) {

  if (err) {

    throw err;
  }
  else {

    //
    // get the information about the repo.
    //
    lib.git.repoInfo(function(err, config) {

      if (err) {
        throw err;
      }

      var user = lib.git.getUserIdentity(config);
 
      //
      // generate the whoami command.
      //
      lib.git.whoami = function() {
        log(0, 'User identified as ' + user.name + ' (' + user.id + ')\n');
      };
      
      lib.git.whoami();
      handler(config);
    });
  }
});


